version: "3.7"

services:
  mongodb:
    image: mongo:7.0.8-rc0-jammy
    hostname: mongodb
    ports:
      - '27017:27017'
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo_data:/data/db
      - mongo_config_data:/data/configdb
    restart: always
  
  rabbitmq:
    image: rabbitmq:3.8-management
    restart: always
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:15672" ]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:latest
    command: postgres -c 'max_connections=250'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  
  arbiter:
    build:
      context: .
      dockerfile: Arbiter/Arbiter.API/Dockerfile
    restart: always
    environment:
      - CONNECTIONSTRINGS__DATABASE=User ID=postgres;Password=postgres;Host=postgres;Port=5432;Database=bank-arbiter-db
    ports:
      - "7000:8080"
    depends_on:
      - postgres
    volumes:
      - /var/log/bank/arbiter:/app/logs
  
  core:
    build:
      context: .
      dockerfile: Core/Core.API/Dockerfile
    restart: always
    environment:
      - RABBITMQ__HOSTNAME=rabbitmq
      - CONNECTIONSTRINGS__DATABASE=User ID=postgres;Password=postgres;Host=postgres;Port=5432;Database=bank-core-db
    ports:
      - "7002:8080"
    depends_on:
      - rabbitmq
      - postgres
    links:
      - rabbitmq
      - postgres
    volumes:
      - /var/log/bank/core:/app/logs
  
  loan:
    build:
      context: .
      dockerfile: Loan/Loan.API/Dockerfile
    restart: always
    environment:
      - RABBITMQ__HOSTNAME=rabbitmq
      - CONNECTIONSTRINGS__DATABASE=User ID=postgres;Password=postgres;Host=postgres;Port=5432;Database=bank-loan-db
    ports:
      - "7003:8080"
    depends_on:
      - rabbitmq
      - postgres
    links:
      - postgres
    volumes:
      - /var/log/bank/loan:/app/logs
  
  operation-history:
    build:
      context: .
      dockerfile: OperationHistory/OperationHistory.API/Dockerfile
    restart: always
    environment:
      - RABBITMQ__HOSTNAME=rabbitmq
      - CONNECTIONSTRINGS__DATABASE=User ID=postgres;Password=postgres;Host=postgres;Port=5432;Database=bank-op-history-db
      - CONNECTIONSTRINGS__HANGFIRE=User ID=postgres;Password=postgres;Host=postgres;Port=5432;Database=hangfire-db
    ports:
      - "7004:8080"
    depends_on:
      - rabbitmq
      - postgres
    links:
      - rabbitmq
      - postgres
    volumes:
      - /var/log/bank/operation-history:/app/logs

  authorization-server:
    build:
      context: .
      dockerfile: AuthorizationServer/AuthorizationServer.API/Dockerfile
    restart: always
    environment:
      - CONNECTIONSTRINGS__DATABASE=User ID=postgres;Password=postgres;Host=postgres;Port=5432;Database=authorization-server-db
    ports:
      - "7005:8080"
    depends_on:
      - postgres
    volumes:
      - /var/log/bank/authorization-server:/app/logs

  observer:
    build:
      context: .
      dockerfile: Observer/Observer.API/Dockerfile
    restart: always
    environment:
      - CONNECTIONSTRINGS__DATABASE=User ID=postgres;Password=postgres;Host=postgres;Port=5432;Database=observer-db
    ports:
      - "7006:8080"
    depends_on:
      - postgres
    volumes:
      - /var/log/bank/observer:/app/logs
  
  bff-client:
    build:
      context: ../
      dockerfile: backend-frontend/bff-client/Dockerfile
    restart: always
    environment:
      - MONGO_URL=mongodb://root:password@127.0.0.1:27017
      - BACKEND_URL=http://127.0.0.1
    ports:
      - "3000:3000"
    depends_on:
      - mongodb
  web-app-client:
    build:
      context: ../
      dockerfile: frontend/web-app-client/Dockerfile
    restart: always
    ports:
      - "80:80"
volumes:
  rabbitmq_data:
  postgres_data:
  mongo_data:
  mongo_config_data: